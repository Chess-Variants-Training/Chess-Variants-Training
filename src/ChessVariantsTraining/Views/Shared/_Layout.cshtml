@using ChessVariantsTraining.Models;
@inject ChessVariantsTraining.Services.IPersistentLoginHandler LoginHandler
@inject ChessVariantsTraining.DbRepositories.INotificationRepository NotificationRepository

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    @if (IsSectionDefined("Description"))
    {
        @:<meta name="description" content="@RenderSection("Description")">
    }
    <meta name="keywords" content="atomic-chess,antichess,three-check,king-of-the-hill,horde,racing-kings,chess,puzzles,tactics,training,endgames">
    <title>
        @if (IsSectionDefined("Title"))
        {
            @RenderSection("title");@: | Chess Variants Training
        }
        else
        {
            @:No title | Chess Variants Training
        }
    </title>
    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
    <link href="~/styles/topbar.css" rel="stylesheet">
    <link href="~/styles/main.css" rel="stylesheet">
    <link href="~/images/favicon.ico" rel="icon">
    <script src="~/scripts/main.js" type="text/javascript"></script>
    @if (IsSectionDefined("AddToHead"))
    {
        RenderSection("AddToHead");
    }
</head>
<body>
    <div id="error-overlay" class="nodisplay">
        <div id="error-overlay-inner"></div>
        <div id="error-overlay-close">click this bar to close it</div>
    </div>
    <div id="topbar">
        <ul id="topbar-menu">
            <li id="topbar-icon-container"><img src="~/images/icon.png" alt="Chess Variants Training icon" id="topbar-icon" title="Chess Variants Training"></li>
            <li>@Html.ActionLink("Home", "Index", "Home", null, null)</li>
            <li class="dropdown">
                @Html.ActionLink("Train", "Index", "Puzzle", null, null)
                <ul>
                    <li>@Html.ActionLink("Puzzles", "Index", "Puzzle", null, null)</li>
                    <li>@Html.ActionLink("Timed training", "Index", "TimedTraining", null, null)</li>
                    <li>@Html.ActionLink("Endgames", "Index", "Endgames", null, null)</li>
                </ul>
            </li>
            @{ User loggedIn = LoginHandler.LoggedInUser(Context);
            }
            @if (loggedIn != null)
            {
                <li> @Html.ActionLink("Contribute", "Editor", "Puzzle", null, null) </li>
            }
            <li>@Html.ActionLink("Variant960", "Lobby", "Variant960", null, null)</li>
            <li class="right dropdown">
                @{
                    if (loggedIn == null)
                    {
                        @Html.ActionLink("Log in", "Login", "User", null, null)
                    }
                    else
                    {
                        @Html.ActionLink(loggedIn.Username, "Profile", "User", new { id = loggedIn.ID }, null)
                        <ul>
                            <li>@Html.ActionLink("Profile", "Profile", "User", new { id = loggedIn.ID }, null)</li>
                            <li>@Html.ActionLink("Edit", "Edit", "User")</li>
                            <li>@Html.ActionLink("Notifications", "Index", "Notification")</li>
                            <li>@Html.ActionLink("Log out", "Logout", "User")</li>
                        </ul>
                    }
                }
            </li>
            @if (loggedIn != null && UserRole.HasAtLeastThePrivilegesOf(loggedIn.Roles, new string[] { UserRole.COMMENT_MODERATOR, UserRole.PUZZLE_EDITOR }))
            {
                <li class="right">@Html.ActionLink("Reports", "ListAll", "Report")</li>
            }
            @if (loggedIn != null && UserRole.HasAtLeastThePrivilegesOf(loggedIn.Roles, new string[] { UserRole.PUZZLE_REVIEWER }))
            {
                <li class="right">@Html.ActionLink("Review", "Index", "Review")</li>
            }
            @{ long unread = loggedIn == null ? 0 : NotificationRepository.UnreadCount(loggedIn.ID); }
            @if (unread != 0)
            {
              <li class="right">@Html.ActionLink(unread.ToString(), "Index", "Notification", null, new { @class = "unread-notifications" })</li>
            }
        </ul>
    </div>
    <div id="bodycontainer">
        @RenderBody()
    </div>
</body>
</html>
